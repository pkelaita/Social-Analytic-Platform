package cache;

import javax.mail.Message;

import org.bson.Document;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

/**
 * Connects to Mongo database and adds specified emails. Must have a 'mongod'
 * instance running
 * 
 * @author piercekelaita
 */
public class DatabaseClient {

	private static final String DATABASE_NAME = "EMAIL_DB";
	private static final String COLLECTION_NAME = "MESSAGES";
	private static final int DEFAULT_PORT = 27017;

	protected static MongoDatabase database;
	protected static MongoCollection<Document> collection;
	protected static MongoClient client;

	/**
	 * Pings Mongo to ensure a secure connection and retrieves information from the
	 * database with the specified default information
	 */
	public static void connectToDatabase() {

		System.out.println("\nConnecting to database...");

		// check connection
		MongoClient ping = new MongoClient();
		MongoDatabase db = ping.getDatabase("ping");
		db.drop();
		ping.close();

		// connects with server
		client = new MongoClient("localhost", DEFAULT_PORT);
		System.out.println("Server connection successful @ localhost:" + DEFAULT_PORT);

		// connects with Database
		database = client.getDatabase(DATABASE_NAME);

		// creates Collection
		collection = database.getCollection(COLLECTION_NAME);
		System.out.println("Database connection successful @ " + DATABASE_NAME + "." + COLLECTION_NAME);

	}

	/**
	 * Adds a given number of parsed messages to the database, starting with the
	 * most recent message
	 * 
	 * @param messages
	 *            inbox messages generated by MailClient
	 * @param last
	 *            the number of recent messages to add to databse
	 */
	public static void addLast(Message[] messages, int last) {
		System.out.println("\nAdding emails to database...");
		int done = 0;
		for (int i = messages.length - 1; i > messages.length - last - 1; i--) {
			collection.insertOne(new MailContent(messages[i], i).toBson());

			done++;
			printProgressBar(done, last);
		}
		System.out.println("\nAdded last " + last + " emails to database.");

	}

	public static void printProgressBar(int done, int total) {
		final int bar_length = 50;
		double perc = (double) done / (double) total;

		System.out.print("\r[");
		int i = 0;
		for (; i <= (int) (perc * bar_length); i++) {
			System.out.print("=");
		}
		for (; i < bar_length; i++) {
			System.out.print(" ");
		}
		
		long percOut = Math.round(perc * 100);
		System.out.print("] " + percOut + "% [" + done + "/" + total + "]");
	}

	/**
	 * Clears the collection
	 * 
	 * @return the number of messages cleared from the database collection
	 */
	public static long clearDB() {
		long removed = collection.count();
		collection.deleteMany(new Document());
		return removed;
	}

	/**
	 * Getter method for the MongoDB database.
	 * 
	 * @return the MongoDatabase being used
	 */
	public static MongoDatabase getDB() {
		return database;
	}

	/**
	 * Getter method for MongoDB collection.
	 * 
	 * @return the MongoCollection being used
	 */
	public static MongoCollection<Document> getCol() {
		return collection;
	}

	/**
	 * Closes the MongoClient connection opened in connectToDatabase() to prevent
	 * possible resource leaks
	 */
	public static void closeMongoConnection() {
		client.close();
	}
}
